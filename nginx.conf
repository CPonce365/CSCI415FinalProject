
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    # Combined default + custom Lua module paths
    lua_package_path "/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/lib/lua/?.lua;/usr/local/lib/lua/?/init.lua;;";

    error_log logs/error.log info;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  _;

        set $backend_url "";

        location /lua-test {
            content_by_lua_block {
                ngx.header.content_type = "text/plain"
                ngx.say("Lua is working!")
            }
        }

        location /video1-compressed.mp4 {

            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin '*';
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header Access-Control-Allow-Headers '*';
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }

            content_by_lua_block {
                ngx.header.content_type = "text/plain"

                local headers = ngx.req.get_headers()
                local client_header = ngx.var.arg_ip or ngx.req.get_headers()["X-Client-IP"] or "nil"

                local ok, http = pcall(require, "resty.http")
                if not ok then
                    ngx.say("failed to require resty.http: ", http)
                    ngx.log(ngx.ERR, "failed to require resty.http: ", http)
                    return
                end

                local ok, cjson = pcall(require, "cjson")
                if not ok then
                    ngx.say("failed to require cjson: ", cjson)
                    ngx.log(ngx.ERR, "failed to require cjson: ", cjson)
                    return
                end

                local url = "http://127.0.0.1:5000/get_cdn?client_ip=" .. client_header
                ngx.log(ngx.INFO, "Calling Flask API at: ", url)

                local httpc = http.new()
                httpc:set_timeout(1000)

                local res, err = httpc:request_uri(url, { method = "GET" })

                if not res then
                    ngx.say("failed to reach Flask API: ", err)
                    ngx.log(ngx.ERR, "failed to reach Flask API: ", err)
                    return
                end

                ngx.log(ngx.INFO, "Flask response: ", res.body)

                local parsed, perr = pcall(cjson.decode, res.body)
                if not parsed or not perr.best_cdn then
                    ngx.say("failed to decode JSON: ", res.body)
                    ngx.log(ngx.ERR, "failed to decode JSON: ", res.body)
                    return
                end

                ngx.var.backend_url = "http://" .. perr.best_cdn .. ngx.var.request_uri
                ngx.log(ngx.INFO, "Smart proxy to CDN ", perr.best_cdn, " for client ", client_header)
                ngx.header["Access-Control-Allow-Origin"] = "*"
                return ngx.exec("@cdn_proxy")
            }
        }

        location / {

            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin '*';
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header Access-Control-Allow-Headers '*';
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }

            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"

                local headers = ngx.req.get_headers()
                local client_header = ngx.var.arg_ip or ngx.req.get_headers()["X-Client-IP"] or "nil"

                local url = "http://127.0.0.1:5000/get_cdn?client_ip=" .. client_header

                local httpc = http.new()
                httpc:set_timeout(1000)

                local res = httpc:request_uri(url, { method = "GET" })

                if not res or res.status ~= 200 then
                    ngx.status = 503
                    ngx.say("CDN router error: ", res and res.body or "no response")
                    return
                end

                local ok, parsed = pcall(cjson.decode, res.body)
                if not ok or not parsed.best_cdn then
                    ngx.status = 503
                    ngx.say("Invalid CDN router response")
                    return
                end

                ngx.var.backend_url = "http://" .. parsed.best_cdn .. ngx.var.request_uri
                ngx.log(ngx.INFO, "Smart proxy to CDN ", perr.best_cdn, " for client ", client_header)
                ngx.header["Access-Control-Allow-Origin"] = "*"
                return ngx.exec("@cdn_proxy")
            }
        }

        location @cdn_proxy {
            internal;
            proxy_pass $backend_url;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Range $http_range;
            proxy_http_version 1.1;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
